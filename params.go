package coinbasepro

import (
	"fmt"
	"net/url"
	"time"

	"github.com/shopspring/decimal"

	"github.com/jalavosus/coinbasepro-go/util"
)

type GetAccountHistoryParams struct {
	// Before requires a positive integer. If set, returns ledger entries before the specified integer.
	Before *uint
	// After requires a positive integer. If set, returns ledger entries after the specified integer.
	After *uint
	// If set, returns ledger entries created after the start_date timestamp, sorted by newest creation date. When combined with end_date, returns ledger entries in the specified time range.
	StartDate *time.Time
	// If set, returns ledger entries created before the end_date timestamp, sorted by newest creation date.
	EndDate *time.Time
	// Limit defaults to 1000
	Limit *uint
}

func (p GetAccountHistoryParams) GetEncoded() string {
	params := url.Values{}
	if p.Before != nil {
		params.Set("before", fmt.Sprintf("%d", *p.Before))
	}
	if p.After != nil {
		params.Set("after", fmt.Sprintf("%d", *p.After))
	}
	if p.StartDate != nil {
		params.Set("start_date", util.TimeToTimestampString(*p.StartDate))
	}
	if p.EndDate != nil {
		params.Set("end_date", util.TimeToTimestampString(*p.EndDate))
	}
	if p.Limit != nil && *p.Limit != 0 {
		params.Set("limit", fmt.Sprintf("%d", *p.Limit))
	}

	return params.Encode()
}

// NewOrderParams follows the spec documented at https://docs.pro.coinbase.com/#orders
// for placing new orders on Coinbase Pro.
// Note that while this does have "Params" in its name, it is sent
// as a JSON-encoded POST request body.
// This data should never be passed as a bare NewOrderParams object;
// instead, it should be passed using LimitOrderParams or MarketOrderParams.
type NewOrderParams struct {
	// ClientOID is an optional user-generated and supplied order ID,
	// and must be a UUID generated by your trading application
	ClientOID *string `json:"client_oid,omitempty"`
	// Type is one of "limit" or "market", and defaults to "limit" if not supplied.
	Type *OrderType `json:"type,omitempty"`
	// Side is one of "buy" or "sell", and must be passed.
	Side OrderSide `json:"side"`
	// ProductID is a valid Coinbase Pro product ID.
	ProductID string `json:"product_id"`
	// STP is an optional self-trade prevention flag. Defaults to "decrease and cancel".
	STP *SelfTradePreventionFlag `json:"stp,omitempty"`
	// Stop is one of "loss" or "entry", and is optional. Requires StopPrice to be passed if set.
	Stop *StopOrderType `json:"stop,omitempty"`
	// Required if Stop is set. Sets the trigger price for a stop order.
	StopPrice *decimal.Decimal `json:"stop_price,omitempty"`
}

// LimitOrderParams follows the spec documented at https://docs.pro.coinbase.com/#orders
// for placing limit orders on Coinbase Pro.
type LimitOrderParams struct {
	NewOrderParams
	// Price must be specified using a Product's QuoteIncrement unit.
	Price decimal.Decimal `json:"price"`
	// Size must be greater than a Product's BaseMinSize, and no larger than its BaseMaxSize.
	// It is incremented in units of a Product's BaseIncrement.
	Size        decimal.Decimal    `json:"size"`
	TimeInForce *TimeInForceOption `json:"time_in_force,omitempty"`
	// CancelAfter is an optional limit order parameter, and can be one of "min", "hour", or "day".
	// Requirs TimeInForce to be set to GTT.
	CancelAfter *string `json:"cancel_after,omitempty"`
	// PostOnly is an optional post-only flag.
	// Invalid if TimeInForce is set to IOC or FOK.
	PostOnly *bool `json:"post_only,omitempty"`
}

// MarketOrderParams follows the spec documented at https://docs.pro.coinbase.com/#orders
// for placing market orders on Coinbase Pro.
// One of Size or Funds is required to be set.
type MarketOrderParams struct {
	NewOrderParams
	Size  *decimal.Decimal `json:"size,omitempty"`
	Funds *decimal.Decimal `json:"funds,omitempty"`
}
